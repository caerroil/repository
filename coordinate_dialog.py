# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CoordinateDialog
                                 A QGIS plugin
 Restituisce le coordinate date
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-06-20
        git sha              : $Format:%H$
        copyright            : (C) 2018 by luca
        email                : lucacaliciotti@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import csv

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'coordinate_dialog_base.ui'))


class CoordinateDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(CoordinateDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        #self.pushButton.clicked.connect(self.stampa)#azione collegata al pulsante 
        #pushButton che una volta cliccato lancia la funzione self stampa
        
        #def stampa():
            #print("ciao")
        
        self.chooseButton.clicked.connect(self.outputPath)
        
        self.pushButton.clicked.connect(self.copyField)
        
        self.mFieldComboBox.setLayer(self.LayerComboBox.currentLayer())
        
    def outputPath(self):
        
        myfile, res = QFileDialog.getSaveFileName(self, "Seleziona il file di uscita", "", "*.csv")#nell'ultimo parametro Ã¨ possibile mettere un filtro sulle estensioni'
        if res:
            myfile += '.csv'
            
        self.pathLine.setText(myfile)
        self.percorso = self.pathLine.text()
        
    def copyField(self):
        vl=self.LayerComboBox.currentLayer()
        field=self.mFieldComboBox.currentText()
        
        with open(self.percorso, "w") as f:
            fieldname = [field]
            writer = csv.DictWriter(f, fieldnames=fieldname)
            
            writer.writeheader()
            
            for i in vl.getFeatures():
                writer.writerow({field:i[field]})
                
        
        
        QMessageBox.information(self, "Informazioni", "Salvataggio completato")